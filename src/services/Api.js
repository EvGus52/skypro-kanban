import axios from "axios";

const API_URL = "https://wedev-api.sky.pro/api/kanban";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateToken({ token }) {
  try {
    console.log(
      "üîê validateToken: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω",
      token?.substring(0, 10) + "..."
    );

    const response = await axios.get(API_URL, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("‚úÖ validateToken: —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, —Å—Ç–∞—Ç—É—Å:", response.status);
    return { isValid: true, data: response.data };
  } catch (error) {
    console.error("‚ùå validateToken: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log("‚ùå validateToken: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401/403)");
      return { isValid: false, error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" };
    }
    console.log("‚ùå validateToken: –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", error.message);
    return { isValid: false, error: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞" };
  }
}
export async function fetchTasks({ token }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:", API_URL);
    console.log("–¢–æ–∫–µ–Ω:", token);

    const data = await axios.get(API_URL, {
      headers: {
        Authorization: `Bearer ${token}`, // –¥–æ–±–∞–≤–ª—è–µ–º "Bearer " –∫ —Ç–æ–∫–µ–Ω—É
      },
    });

    console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á:", data.data);

    return data.data.tasks;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    throw new Error(
      error.response?.data?.error ||
        error.message ||
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
    );
  }
}

export async function fetchTaskById({ token, id }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:", API_URL + "/" + id);
    console.log("–¢–æ–∫–µ–Ω:", token);
    console.log("ID –∑–∞–¥–∞—á–∏:", id);

    const data = await axios.get(API_URL + "/" + id, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", data.data);

    return data.data.task;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    if (error.response?.status === 404) {
      throw new Error("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    throw new Error(
      error.response?.data?.error ||
        error.message ||
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏"
    );
  }
}

export async function postTask({ token, task }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞:", API_URL);
    console.log("–¢–æ–∫–µ–Ω:", token);
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", task);

    const data = await axios.post(API_URL, task, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "",
      },
    });

    console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", data.data);

    return data.data.tasks;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    throw new Error(
      error.response?.data?.error ||
        error.message ||
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
    );
  }
}

export async function editTask({ token, id, task }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å –Ω–∞:", API_URL + "/" + id);
    console.log("–¢–æ–∫–µ–Ω:", token);
    console.log("ID –∑–∞–¥–∞—á–∏:", id);
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", task);

    const data = await axios.put(API_URL + "/" + id, task, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "",
      },
    });

    console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", data.data);

    return data.data.tasks;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    throw new Error(
      error.response?.data?.error ||
        error.message ||
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
    );
  }
}

export async function deleteTask({ token, id }) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞:", API_URL + "/" + id);
    console.log("–¢–æ–∫–µ–Ω:", token);
    console.log("ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", id);

    const data = await axios.delete(API_URL + "/" + id, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "",
      },
    });

    console.log("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", data.data);

    return data.data.tasks;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);
    console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response?.status);
    console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response?.data);

    throw new Error(
      error.response?.data?.error ||
        error.message ||
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
    );
  }
}
