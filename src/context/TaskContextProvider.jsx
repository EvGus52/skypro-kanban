import React, { useState, useEffect, useContext } from "react";
import { TaskContext } from "./TaskContext";
import { AuthContext } from "./AuthContext";
import { useError } from "./ErrorContext";
import { fetchTasks, postTask, editTask, deleteTask } from "../services/Api";

export const TaskProvider = ({ children }) => {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const { user, isInitialized } = useContext(AuthContext);
  const { showError } = useError();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadTasks = async () => {
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthProvider
      if (!isInitialized) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞
      const token = localStorage.getItem("token");
      if (!user || !token) {
        setTasks([]);
        return;
      }

      try {
        setLoading(true);
        setError("");
        console.log(
          "üîÑ TaskContextProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
          user
        );

        const data = await fetchTasks({ token });

        if (data) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
          const tasksWithId = data.map((task) => ({
            ...task,
            id: task._id,
          }));
          setTasks(tasksWithId);
          console.log(
            "‚úÖ TaskContextProvider: –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
            tasksWithId.length
          );
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", err);
        setError(err.message);
        showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏");
      } finally {
        setLoading(false);
      }
    };

    loadTasks();
  }, [user, isInitialized]); // –ó–∞–≤–∏—Å–∏–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const addTask = async (taskData) => {
    if (!user) return false;

    try {
      setLoading(true);
      setError("");
      const token = localStorage.getItem("token");
      const data = await postTask({ token, task: taskData });

      if (data) {
        const tasksWithId = data.map((task) => ({
          ...task,
          id: task._id,
        }));
        setTasks(tasksWithId);
        return true; // –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
      }
      return false;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", err);
      setError(err.message);
      throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    } finally {
      setLoading(false);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const updateTask = async (id, taskData) => {
    if (!user) return false;

    try {
      setLoading(true);
      setError("");
      const token = localStorage.getItem("token");
      const data = await editTask({ token, id, task: taskData });

      if (data) {
        const tasksWithId = data.map((task) => ({
          ...task,
          id: task._id,
        }));
        setTasks(tasksWithId);
        return true; // –£—Å–ø–µ—à–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      }
      return false;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", err);
      setError(err.message);
      throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const removeTask = async (id) => {
    if (!user) return false;

    try {
      setLoading(true);
      setError("");
      const token = localStorage.getItem("token");
      const data = await deleteTask({ token, id });

      if (data) {
        const tasksWithId = data.map((task) => ({
          ...task,
          id: task._id,
        }));
        setTasks(tasksWithId);
        return true; // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      }
      return false;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", err);
      setError(err.message);
      throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
  const moveTask = async (taskId, newStatus) => {
    if (!user) return false;

    try {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      const updatedTasks = tasks.map((task) =>
        task.id === taskId ? { ...task, status: newStatus } : task
      );
      setTasks(updatedTasks);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const token = localStorage.getItem("token");
      const taskToUpdate = tasks.find((task) => task.id === taskId);

      if (!taskToUpdate) {
        throw new Error("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }

      const data = await editTask({
        token,
        id: taskId,
        task: { ...taskToUpdate, status: newStatus },
      });

      if (data) {
        const tasksWithId = data.map((task) => ({
          ...task,
          id: task._id,
        }));
        setTasks(tasksWithId);
        return true;
      }
      return false;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", err);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const originalTasks = tasks.map((task) =>
        task.id === taskId ? { ...task, status: task.status } : task
      );
      setTasks(originalTasks);
      setError(err.message);
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É");
      return false;
    }
  };

  return (
    <TaskContext.Provider
      value={{
        tasks,
        setTasks,
        loading,
        error,
        addTask,
        updateTask,
        removeTask,
        moveTask,
      }}
    >
      {children}
    </TaskContext.Provider>
  );
};
